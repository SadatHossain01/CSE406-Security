import numpy as np
import random
from sympy import nextprime
from BitVector import BitVector

Sbox = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

InvSbox = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)

Mixer = [
    [BitVector(hexstring="02"), BitVector(hexstring="03"),
     BitVector(hexstring="01"), BitVector(hexstring="01")],
    [BitVector(hexstring="01"), BitVector(hexstring="02"),
     BitVector(hexstring="03"), BitVector(hexstring="01")],
    [BitVector(hexstring="01"), BitVector(hexstring="01"),
     BitVector(hexstring="02"), BitVector(hexstring="03")],
    [BitVector(hexstring="03"), BitVector(hexstring="01"),
     BitVector(hexstring="01"), BitVector(hexstring="02")]
]

InvMixer = [
    [BitVector(hexstring="0E"), BitVector(hexstring="0B"),
     BitVector(hexstring="0D"), BitVector(hexstring="09")],
    [BitVector(hexstring="09"), BitVector(hexstring="0E"),
     BitVector(hexstring="0B"), BitVector(hexstring="0D")],
    [BitVector(hexstring="0D"), BitVector(hexstring="09"),
     BitVector(hexstring="0E"), BitVector(hexstring="0B")],
    [BitVector(hexstring="0B"), BitVector(hexstring="0D"),
     BitVector(hexstring="09"), BitVector(hexstring="0E")]
]


def print_byte_string(arr):
    for val in arr:
        print(chr(val), end="")
    print()


def print_hex_byte_string(arr):
    for val in arr:
        if val < 16:
            print("0", end="")
        print(hex(val)[2:], end=" ")
    print()


def print_hex_array(arr):
    """
    arr: an 1D array of uint8
    """
    for val in arr:
        if val < 16:
            print("0", end="")
        print(hex(val)[2:], end=" ")
    print()


def print_hex_matrix(mat):
    for row in mat:
        print_hex_array(row)
    print()


def print_round_details(round, state_matrix, key_matrix):
    print("Round", round)
    print("State Matrix: ")
    print_hex_matrix(state_matrix)
    print("Round Key Matrix: ")
    print_hex_matrix(key_matrix)


def print_text_details(title, data, ascii_first):
    print(title + ":")
    if ascii_first:
        print("In ASCII:", end=" ")
        print_byte_string(data)
        print("In HEX: ", end="")
        print_hex_byte_string(data)
    else:
        print("In HEX: ", end="")
        print_hex_byte_string(data)
        print("In ASCII:", end=" ")
        print_byte_string(data)
    print()


def bytes_to_matrix(data):
    """
    data: a byte array
    """
    # construct a 4x4 matrix of uint8 data type from the data
    assert len(data) == 16
    mat = np.zeros((4, 4), dtype=np.uint8)
    mat = [[data[i * 4 + j] for j in range(4)] for i in range(4)]
    # transpose the matrix to get the column major orientation
    mat = np.transpose(mat)
    return mat


def matrix_to_bytes(mat):
    """
    The matrix is assumed to be in column major orientation
    """
    mat = np.transpose(mat)
    res = np.zeros(16, dtype=np.uint8)
    for i in range(4):
        for j in range(4):
            res[i * 4 + j] = mat[i][j]
    return res


def add_scalar(byte_arr, scalar):
    """
    Simulates adding a scalar to the number represented by the byte array
    """
    length = len(byte_arr)
    res = np.zeros(length, dtype=np.uint8)
    res[:] = byte_arr[:]
    for i in range(length - 1, -1, -1):
        to_add = min(scalar, 255 - res[i])
        res[i] += to_add
        scalar -= to_add
        if scalar == 0:
            break
    return res


def xor_bytes(arr1, arr2):
    """
    arr1: a numpy array of uint8
    arr2: a numpy array of uint8
    """
    assert len(arr1) == len(arr2)
    result = np.zeros(len(arr1), dtype=np.uint8)
    for i in range(len(arr1)):
        result[i] = arr1[i] ^ arr2[i]
    return result


def substitute_bytes(arr, src):
    """
    arr: 1D or 2D numpy array of uint8
    """
    flat_array = arr.flatten()
    substituted = np.array([src[val] for val in flat_array])
    substituted = substituted.reshape(arr.shape)
    return substituted


def pad_bytes(data, space_padding):
    """
    data: a byte array
    """
    if (len(data) % 16 == 0 and space_padding):
        return data
    res = np.zeros(len(data) + (16 - len(data) % 16), dtype=np.uint8)
    res[:len(data)] = data
    if space_padding:
        res[len(data):] = ord(' ')
    else:
        if len(data) % 16 == 0:
            # pad with an entire dummy block of 0s (16 bytes)
            res[len(data):] = [0x00] * 16
        else:
            rem = 16 - len(data) % 16
            res[len(data):] = [rem] * rem
    return res


def unpad_bytes(data, space_padding=False):
    """
    data: a byte array
    """
    assert len(data) % 16 == 0
    if space_padding:
        return data
    else:
        extra = data[-1] if data[-1] != 0 else 16
        length = len(data)
        return data[:length - extra]


def generate_prime(size_bits):
    """
    Generates a prime number of the specified size (bits)
    """
    # Generate a random number of the specified size
    num = random.getrandbits(size_bits)

    # Find the next prime number greater than or equal to the generated number
    prime = nextprime(num)

    return prime


def fix_key(key, expected_size):
    """
    key: a byte array
    expected_size: in bits
    Returns: a numpy array of uint8
    """
    expected_bytes = expected_size // 8
    res = np.zeros(expected_bytes, dtype=np.uint8)
    for i in range(expected_bytes):
        res[i] = key[i % len(key)]
    return res


def string_to_bytes(str):
    return np.array([ord(char) for char in str], dtype=np.uint8)


def bytes_to_string(arr):
    return "".join([chr(val) for val in arr])


def int_to_bytes(num, len=-1):
    """
    Returns: a numpy byte array of uint8, which has length len (len bytes)\n
    if len is -1, then the length of the array is the minimum required to store the number
    """
    if len == -1:
        len = (num.bit_length() + 7) // 8
    bits = np.binary_repr(num, width=len * 8)
    res = np.zeros(len, dtype=np.uint8)
    for i in range(len):
        res[i] = int(bits[i * 8:(i + 1) * 8], 2)
    return res


def generate_iv():
    res = np.zeros(16, dtype=np.uint8)
    for i in range(16):
        res[i] = random.randint(0, 255)
    return res
